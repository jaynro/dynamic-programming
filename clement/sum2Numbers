
"""
Use  two for loops
traverse the array twice to find the sum

Traverse the array one
go through each of the numbers individually,
and then at each number traverse through the rest of the array to find the sum
"""

"""
Table of truth:
Traverse the array one
go through each of the numbers individually,
and then at each number traverse through the rest of the array to find the sum

Array:  [
            0   3,
            1   5,
            2   -4,
            3   8,
            4   11,
            5   1,
            6   -1,
            7   6]
targetSum       10
condition_1     if num1+num2= tarrget then return

Loop 1          FROM: i=0 to len(array) -1
Loop 2(nested)  FROM: j=i+1  to len (array)

i   num1=a[i]   j=i+1    num2=a[j]  C_1     return 
0   3           1           5       8->0       NA
0   3           2           -4      1->0       NA
0   3           3           8      1->0       NA
...
..
4   11          5           1       12->0       NA
4   11          6           -1      10->T       i,j



"""
# O(n^2) time |O(1) space
def twoNumberSum_1(array, targetSum):
    
    for i in range(len(array)-1):
        firstNum = array[i]
        
        for j in range(i+1, len(array)):
            secondNum=array[j]
            if firstNum + secondNum == targetSum:
                return [firstNum ,secondNum]
    return


"""
Use  1 for loops

if x+y = targetSum then x = array[i]

declare an empty map or set
Traverse the array 
go through each of the numbers individually,
and then at each number calculate 'y'.
if 'y' exist in map then return a[i] and 'y'
else
add 'y' to visited map
if array traverse finish, the return empty array
"""

"""
Table of truth

Array:  [0] =   3,
        [1] =   5,
        [2] =   -4,
        [3] =   8,
        [4] =   11,
        [5] =   1,
        [6] =   -1,
        [7] =   6,
targetSum       10
map ={}
y=targetSum - a[i]
c1= if y in map


i       a[i]    map                 y                c1      map            return
[1] =   5,      {}                  10-5=5           False   {5}            NA
[2] =   -4,     {5}                 10--4+-14        False   {5,-4}         NA
[3] =   8,      {5,-4}              10-8=2           False   {5,-4,8}       NA     
[4] =   11,     {5,-4,8}            10-11=1          False   {5,-4,8,11}    NA
[5] =   1,      {5,-4,8,11}         10-1=9           False   {5,-4,8,11,1}  NA
[6] =   -1,     {5,-4,8,11,1}       10--1=11         TRUE                   a[i],y
[7] =   6,

"""


def twoNumberSum_2(array, targetSum):

    visited={}

    for num in  array:
        y = targetSum -num 

        if y in visited:
            return [y, num]
        else:
            visited[num] = True

    return []
# array=[3,5,-4,8,11,1,-1,6]
#   3



"""
Use  1 for loops

sort
i.e.
A)
targetSum:10
array=[3,5,-4,8,11,1,-1,6]
        [-4,-1,1,3,5,6,8,11]
leftIdx =a[0]
rightIdx =a[len(a)-1]

-4, 11 = 7  ; 7 < targetSum:10  then leftIdx+1
-1, 11 = 7  ; 10 == targetSum:10  then return 10

B)
targetSum:4
array=[3,5,-4,8,11,1,-1,6]
        [-4,-1,1,3,5,6,8,11]
leftIdx =a[0] =0
rightIdx =a[len(a)-1] =6 
C1=if tempSum < targetSum:
C2=if tempSum < targetSum:

tempSum     C1     C2         then  leftIdx++: rightIdx--
-4, 11 = 7  0       7 < 4:          0         5*
-4, 8 =  4  1       4 < 4:          1*        5

C)
targetSum:11
array=[3,5,-4,8,11,1,-1,6]
        [-4,-1,1,3,5,6,8,11]
leftIdx =a[0] =0
rightIdx =a[len(a)-1] =6 
C1=if tempSum == targetSum:
C2=if tempSum < targetSum: 
        leftIdx ++ 
    else 
        rightIdx--

tempSum     C1      C2         then  leftIdx++: rightIdx--
-4, 11 = 7  FALSE   7 < 11          1*         6
-1, 11 = 10 FALSE   10 <11          2*         6
 1, 11 = 12  FALSE  12 <11          2         5*
 1, 8 =   9  FALSE   9 <11          3*         5
 3, 8 =11     TRUE

D)
targetSum:21
array=[3,5,-4,8,11,1,-1,6]
        [-4,-1,1,3,5,6,8,11]
leftIdx =a[0] =0
rightIdx =a[len(a)-1] =6 
C1=if tempSum == targetSum:
C2=if tempSum < targetSum: 
        leftIdx ++ 
    else 
        rightIdx--

tempSum     C1      C2         then  leftIdx++: rightIdx--
-4, 11 = 7  FALSE   7  < 21          1*         6
-1, 11 = 10 FALSE   10 < 21          2*         6
 1, 11 = 12 FALSE   10 < 21          3*         6
 3, 11 = 14 FALSE   13 < 21          4*         6
 5, 11 = 16 FALSE   16 < 21          5*         6
 6, 11 = 17 FALSE   17 < 21          6*         6
 8, 11 = 19 FALSE   19 < 21          7*         6


iterate until ...
while leftIdx <rightIdx ?
    tempSum = leftIdx + rightIdx
    if tempSum = targetSum
        return [leftIdx, rightIdx]

    if tempSum < targetSum:
        leftIdx +=1
    else:
        rightIdx =-1  
    

if x+y = targetSum then x = array[i]

declare an empty map or set
Traverse the array 
go through each of the numbers individually,
and then at each number calculate 'y'.
if 'y' exist in map then return a[i] and 'y'
else
add 'y' to visited map
if array traverse finish, the return empty array
"""

def twoNumberSum_3(a, targetSum):
    leftIdx =0
    rightIdx = len(a) -1
    a.sort()
    while leftIdx < rightIdx:
        s1=a[leftIdx]
        s2=a[rightIdx]
        tempSum = s1 + s2

        if tempSum == targetSum:
            return [s1, s2]

        if tempSum < targetSum:
            leftIdx +=1
        else:
            rightIdx =-1  
    return


def main():
    array=[3,5,-4,8,11,1,-1,6]
    #print(twoNumberSum_1(array, 10))
    #print(twoNumberSum_2(array, 10))
    print(twoNumberSum_3(array, 21))

main()

# What is sequence, other than range
# If we use for i nums with no indices then we cannot control unnecesary loops